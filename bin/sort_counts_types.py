#!/usr/bin/env python
import click
import datetime
import logging
import numpy as np
import sys
import time
import gzip
from itertools import compress

console = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console.setFormatter(formatter)
LOG = logging.getLogger("")
LOG.addHandler(console)
LOG.setLevel(logging.INFO)


@click.command()
@click.option('-g', '--gtex', prompt='filtered GTEx liver counts',
              help='path to file generated by filter_gtex_counts.py script', required=True)
@click.option('-t', '--tcga', prompt='filtered TCGA-LIHC counts',
              help='path to file generated by filter_tcga_counts.py script', required=True)
def main(gtex, tcga):
    # start timer
    start = time.time()

    LOG.info("Parse GTEx file")
    gtex_counts, gtex_genes, gtex_file_names = parse_file(gtex)

    LOG.info("Parse TCGA file")
    tcga_counts, tcga_genes, tcga_file_names = parse_file(tcga)

    LOG.info("Generate file for normal and healthy samples")
    sort_types(gtex_file_names, tcga_file_names, gtex_counts, tcga_counts, gtex_genes)

    # stop timer
    end = time.time()
    LOG.info("Script finished in " + str(round(end - start, 2)) + " sec")


def parse_file(file_name):
    """
    Parses file generated by the filtering script

    :param file_name:
    :return: nested list of all counts, nested list of gene IDs/symbols, list of sample names
    """
    all_counts = []
    gene_names = []
    with open(file_name, "r") as file:
        header = next(file)
        header_splitted = header.split("\n")[0].split("\t")
        ids_file = header_splitted[2:]
        for line in file:
            splitted = line.split("\n")[0].split("\t")
            count_line = splitted[2:]
            gene_name = splitted[:2]
            gene_names.append(gene_name)
            all_counts.append(count_line)
    return all_counts, gene_names, ids_file


def sort_types(gtex_file_names, tcga_file_names, gtex_counts, tcga_counts, gtex_genes):
    """
    Generates a file for healthy and cancer samples, combines the GTEx and TCGA data

    :param gtex_file_names: sample IDs GTEx
    :param tcga_file_names: sample IDs TCGA
    :param gtex_counts: nested list of all counts
    :param tcga_counts: nested list of all counts
    :param gtex_genes: nested list of gene IDs/symbols
    :return: None
    """
    # separate cancer and normal samples (TCGA)
    tcga_is_cancer = [True if my_id.startswith("1_") else False for my_id in tcga_file_names]
    tcga_is_healthy = [True if my_id.startswith("0_") else False for my_id in tcga_file_names]

    tcga_cancer_files = list(compress(tcga_file_names, tcga_is_cancer))
    tcga_healthy_files = list(compress(tcga_file_names, tcga_is_healthy))

    # remove 0_/1_ prefixes
    tcga_cancer_files = [x[2:] for x in tcga_cancer_files]
    tcga_healthy_files = [x[2:] for x in tcga_healthy_files]
    gtex_file_names = [x[2:] for x in gtex_file_names]

    tcga_cancer_counts = []
    tcga_healthy_counts = []

    for gene_counts in tcga_counts:
        cancer_counts = list(compress(gene_counts, tcga_is_cancer))
        healthy_counts = list(compress(gene_counts, tcga_is_healthy))

        tcga_cancer_counts.append(cancer_counts)
        tcga_healthy_counts.append(healthy_counts)

    with open("cancer_counts.tsv", "w") as file:
        file.write("gene_id\tgene_name\t" + "\t".join(tcga_cancer_files) + "\n")
        for gene_name, counts_line in zip(gtex_genes, tcga_cancer_counts):
            file.write("\t".join(gene_name) + "\t" + "\t".join(counts_line) + "\n")

    with open("healthy_counts.tsv", "w") as file:
        file.write("gene_id\tgene_name\t" + "\t".join(gtex_file_names) + "\t" + "\t".join(tcga_healthy_files) + "\n")
        for gene_name, counts_tcga, counts_gtex in zip(gtex_genes, tcga_healthy_counts, gtex_counts):
            file.write("\t".join(gene_name) + "\t" + "\t".join(counts_gtex) + "\t" + "\t".join(counts_tcga) + "\n")


if __name__ == "__main__":
    sys.exit(main())
